# 1 Реализовать скрипт, в котором должна быть предусмотрена функция расчёта заработной
# платы сотрудника. Используйте в нём формулу: (выработка в часах*ставка в час) + премия. Во
# время выполнения расчёта для конкретных значений необходимо запускать скрипт с
# параметрами.

from sys import argv
ZP, hours, salary, bonus = argv
print('*** Расчет ЗП ***')
print("*" * 20)
print('Отработано часов: ', hours, "ч.")
print('ставка: ', salary, "т.р.")
print('Премия: ', bonus, "т.р.")
print('Заработано итого: ', int(hours) * int(salary) + int(bonus), "т.р.")

# 2 Представлен список чисел. Необходимо вывести элементы исходного списка, значения
# которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его
# формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

li = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new = [number for i, number in enumerate(li) if li[i] > li[i - 1]]
print(new[1:])

# 3 Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну
# строку.
# Подсказка: используйте функцию range() и генератор.

li = [ i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(li)

# 4 Представлен список чисел. Определите элементы списка, не имеющие повторений.
# Сформируйте итоговый массив чисел, соответствующих требованию. Элементы выведите в
# порядке их следования в исходном списке. Для выполнения задания обязательно используйте
# генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

li = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print(li)
new_li = [i for i in li if li.count(i) == 1]
print(new_li)

# 5 Реализовать формирование списка, используя функцию range() и возможности генератора. В
# список должны войти чётные числа от 100 до 1000 (включая границы). Нужно получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

def mult (a, b):
    return a * b

list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел в диапазоне: ", list)
print('Результат произведения: ', reduce(mult, list))

# 6 Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее.
# Подсказка: используйте функцию count() и cycle() модуля itertools. Обратите внимание, что
# создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 —
# завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
# повторение элементов списка прекратится.

from itertools import count, cycle
for i in count(3):
    print(i)
    if i > 10 - 1:
        break

li = [i for i in range(1, 11)]
counter = 0
for i in cycle(li):
    print(i)
    counter += 1
    if counter > 29:
        break

# 7 Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное
# значение. При вызове функции должен создаваться объект-генератор. Функция вызывается
# следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле
# нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал
# четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def fact(n):
    for i in range(n):
        print(i)
        yield factorial(i)

for el in fact(n = int(input('введи число: '))):
    print(el)
